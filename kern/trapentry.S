/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */

/* Lab3 Challenge1 宏定义被修改，使得一边定义函数一边建立数组 */
#define TRAPHANDLER(num)														\
	.data;																		\
	.long __handler_##num;														\
	.text;																		\
	.globl __handler_##num;				/* define global symbol */				\
	.type __handler_##num, @function;	/* symbol type is function */			\
	.align 2;							/* align function definition */			\
	__handler_##num:					/* function starts here */				\
	pushl $(num);																\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(num)													\
	.data;																		\
	.long __handler_##num;														\
	.text;																		\
	.globl __handler_##num;				/* define global symbol for 'name' */	\
	.type __handler_##num, @function;	/* symbol type is function */			\
	.align 2;							/* align function definition */			\
	__handler_##num:					/* function starts here */				\
	pushl $0;																	\
	pushl $(num);																\
	jmp _alltraps


/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

.data
	.align 4
	.globl _handler_array
_handler_array:

#if 1

 TRAPHANDLER_NOEC(0)
 TRAPHANDLER_NOEC(1)
 TRAPHANDLER_NOEC(2)
 TRAPHANDLER_NOEC(3)
 TRAPHANDLER_NOEC(4)
 TRAPHANDLER_NOEC(5)
 TRAPHANDLER_NOEC(6)
 TRAPHANDLER_NOEC(7)
 TRAPHANDLER(8)
 TRAPHANDLER_NOEC(9)
 TRAPHANDLER(10)
 TRAPHANDLER(11)
 TRAPHANDLER(12)
 TRAPHANDLER(13)
 TRAPHANDLER(14)
 TRAPHANDLER(15)
 TRAPHANDLER_NOEC(16)
 TRAPHANDLER(17)
 TRAPHANDLER_NOEC(18)
 TRAPHANDLER_NOEC(19)
 TRAPHANDLER_NOEC(20)
 TRAPHANDLER_NOEC(21)
 TRAPHANDLER_NOEC(22)
 TRAPHANDLER_NOEC(23)
 TRAPHANDLER_NOEC(24)
 TRAPHANDLER_NOEC(25)
 TRAPHANDLER_NOEC(26)
 TRAPHANDLER_NOEC(27)
 TRAPHANDLER_NOEC(28)
 TRAPHANDLER_NOEC(29)
 TRAPHANDLER_NOEC(30)
 TRAPHANDLER_NOEC(31)
 TRAPHANDLER_NOEC(32)
 TRAPHANDLER_NOEC(33)
 TRAPHANDLER_NOEC(34)
 TRAPHANDLER_NOEC(35)
 TRAPHANDLER_NOEC(36)
 TRAPHANDLER_NOEC(37)
 TRAPHANDLER_NOEC(38)
 TRAPHANDLER_NOEC(39)
 TRAPHANDLER_NOEC(40)
 TRAPHANDLER_NOEC(41)
 TRAPHANDLER_NOEC(42)
 TRAPHANDLER_NOEC(43)
 TRAPHANDLER_NOEC(44)
 TRAPHANDLER_NOEC(45)
 TRAPHANDLER_NOEC(46)
 TRAPHANDLER_NOEC(47)
 TRAPHANDLER_NOEC(48)
 TRAPHANDLER_NOEC(49)
 TRAPHANDLER_NOEC(50)
 TRAPHANDLER_NOEC(51)
 TRAPHANDLER_NOEC(52)
 TRAPHANDLER_NOEC(53)
 TRAPHANDLER_NOEC(54)
 TRAPHANDLER_NOEC(55)
 TRAPHANDLER_NOEC(56)
 TRAPHANDLER_NOEC(57)
 TRAPHANDLER_NOEC(58)
 TRAPHANDLER_NOEC(59)
 TRAPHANDLER_NOEC(60)
 TRAPHANDLER_NOEC(61)
 TRAPHANDLER_NOEC(62)
 TRAPHANDLER_NOEC(63)
 TRAPHANDLER_NOEC(64)
 TRAPHANDLER_NOEC(65)
 TRAPHANDLER_NOEC(66)
 TRAPHANDLER_NOEC(67)
 TRAPHANDLER_NOEC(68)
 TRAPHANDLER_NOEC(69)
 TRAPHANDLER_NOEC(70)
 TRAPHANDLER_NOEC(71)
 TRAPHANDLER_NOEC(72)
 TRAPHANDLER_NOEC(73)
 TRAPHANDLER_NOEC(74)
 TRAPHANDLER_NOEC(75)
 TRAPHANDLER_NOEC(76)
 TRAPHANDLER_NOEC(77)
 TRAPHANDLER_NOEC(78)
 TRAPHANDLER_NOEC(79)
 TRAPHANDLER_NOEC(80)
 TRAPHANDLER_NOEC(81)
 TRAPHANDLER_NOEC(82)
 TRAPHANDLER_NOEC(83)
 TRAPHANDLER_NOEC(84)
 TRAPHANDLER_NOEC(85)
 TRAPHANDLER_NOEC(86)
 TRAPHANDLER_NOEC(87)
 TRAPHANDLER_NOEC(88)
 TRAPHANDLER_NOEC(89)
 TRAPHANDLER_NOEC(90)
 TRAPHANDLER_NOEC(91)
 TRAPHANDLER_NOEC(92)
 TRAPHANDLER_NOEC(93)
 TRAPHANDLER_NOEC(94)
 TRAPHANDLER_NOEC(95)
 TRAPHANDLER_NOEC(96)
 TRAPHANDLER_NOEC(97)
 TRAPHANDLER_NOEC(98)
 TRAPHANDLER_NOEC(99)
 TRAPHANDLER_NOEC(100)
 TRAPHANDLER_NOEC(101)
 TRAPHANDLER_NOEC(102)
 TRAPHANDLER_NOEC(103)
 TRAPHANDLER_NOEC(104)
 TRAPHANDLER_NOEC(105)
 TRAPHANDLER_NOEC(106)
 TRAPHANDLER_NOEC(107)
 TRAPHANDLER_NOEC(108)
 TRAPHANDLER_NOEC(109)
 TRAPHANDLER_NOEC(110)
 TRAPHANDLER_NOEC(111)
 TRAPHANDLER_NOEC(112)
 TRAPHANDLER_NOEC(113)
 TRAPHANDLER_NOEC(114)
 TRAPHANDLER_NOEC(115)
 TRAPHANDLER_NOEC(116)
 TRAPHANDLER_NOEC(117)
 TRAPHANDLER_NOEC(118)
 TRAPHANDLER_NOEC(119)
 TRAPHANDLER_NOEC(120)
 TRAPHANDLER_NOEC(121)
 TRAPHANDLER_NOEC(122)
 TRAPHANDLER_NOEC(123)
 TRAPHANDLER_NOEC(124)
 TRAPHANDLER_NOEC(125)
 TRAPHANDLER_NOEC(126)
 TRAPHANDLER_NOEC(127)
 TRAPHANDLER_NOEC(128)
 TRAPHANDLER_NOEC(129)
 TRAPHANDLER_NOEC(130)
 TRAPHANDLER_NOEC(131)
 TRAPHANDLER_NOEC(132)
 TRAPHANDLER_NOEC(133)
 TRAPHANDLER_NOEC(134)
 TRAPHANDLER_NOEC(135)
 TRAPHANDLER_NOEC(136)
 TRAPHANDLER_NOEC(137)
 TRAPHANDLER_NOEC(138)
 TRAPHANDLER_NOEC(139)
 TRAPHANDLER_NOEC(140)
 TRAPHANDLER_NOEC(141)
 TRAPHANDLER_NOEC(142)
 TRAPHANDLER_NOEC(143)
 TRAPHANDLER_NOEC(144)
 TRAPHANDLER_NOEC(145)
 TRAPHANDLER_NOEC(146)
 TRAPHANDLER_NOEC(147)
 TRAPHANDLER_NOEC(148)
 TRAPHANDLER_NOEC(149)
 TRAPHANDLER_NOEC(150)
 TRAPHANDLER_NOEC(151)
 TRAPHANDLER_NOEC(152)
 TRAPHANDLER_NOEC(153)
 TRAPHANDLER_NOEC(154)
 TRAPHANDLER_NOEC(155)
 TRAPHANDLER_NOEC(156)
 TRAPHANDLER_NOEC(157)
 TRAPHANDLER_NOEC(158)
 TRAPHANDLER_NOEC(159)
 TRAPHANDLER_NOEC(160)
 TRAPHANDLER_NOEC(161)
 TRAPHANDLER_NOEC(162)
 TRAPHANDLER_NOEC(163)
 TRAPHANDLER_NOEC(164)
 TRAPHANDLER_NOEC(165)
 TRAPHANDLER_NOEC(166)
 TRAPHANDLER_NOEC(167)
 TRAPHANDLER_NOEC(168)
 TRAPHANDLER_NOEC(169)
 TRAPHANDLER_NOEC(170)
 TRAPHANDLER_NOEC(171)
 TRAPHANDLER_NOEC(172)
 TRAPHANDLER_NOEC(173)
 TRAPHANDLER_NOEC(174)
 TRAPHANDLER_NOEC(175)
 TRAPHANDLER_NOEC(176)
 TRAPHANDLER_NOEC(177)
 TRAPHANDLER_NOEC(178)
 TRAPHANDLER_NOEC(179)
 TRAPHANDLER_NOEC(180)
 TRAPHANDLER_NOEC(181)
 TRAPHANDLER_NOEC(182)
 TRAPHANDLER_NOEC(183)
 TRAPHANDLER_NOEC(184)
 TRAPHANDLER_NOEC(185)
 TRAPHANDLER_NOEC(186)
 TRAPHANDLER_NOEC(187)
 TRAPHANDLER_NOEC(188)
 TRAPHANDLER_NOEC(189)
 TRAPHANDLER_NOEC(190)
 TRAPHANDLER_NOEC(191)
 TRAPHANDLER_NOEC(192)
 TRAPHANDLER_NOEC(193)
 TRAPHANDLER_NOEC(194)
 TRAPHANDLER_NOEC(195)
 TRAPHANDLER_NOEC(196)
 TRAPHANDLER_NOEC(197)
 TRAPHANDLER_NOEC(198)
 TRAPHANDLER_NOEC(199)
 TRAPHANDLER_NOEC(200)
 TRAPHANDLER_NOEC(201)
 TRAPHANDLER_NOEC(202)
 TRAPHANDLER_NOEC(203)
 TRAPHANDLER_NOEC(204)
 TRAPHANDLER_NOEC(205)
 TRAPHANDLER_NOEC(206)
 TRAPHANDLER_NOEC(207)
 TRAPHANDLER_NOEC(208)
 TRAPHANDLER_NOEC(209)
 TRAPHANDLER_NOEC(210)
 TRAPHANDLER_NOEC(211)
 TRAPHANDLER_NOEC(212)
 TRAPHANDLER_NOEC(213)
 TRAPHANDLER_NOEC(214)
 TRAPHANDLER_NOEC(215)
 TRAPHANDLER_NOEC(216)
 TRAPHANDLER_NOEC(217)
 TRAPHANDLER_NOEC(218)
 TRAPHANDLER_NOEC(219)
 TRAPHANDLER_NOEC(220)
 TRAPHANDLER_NOEC(221)
 TRAPHANDLER_NOEC(222)
 TRAPHANDLER_NOEC(223)
 TRAPHANDLER_NOEC(224)
 TRAPHANDLER_NOEC(225)
 TRAPHANDLER_NOEC(226)
 TRAPHANDLER_NOEC(227)
 TRAPHANDLER_NOEC(228)
 TRAPHANDLER_NOEC(229)
 TRAPHANDLER_NOEC(230)
 TRAPHANDLER_NOEC(231)
 TRAPHANDLER_NOEC(232)
 TRAPHANDLER_NOEC(233)
 TRAPHANDLER_NOEC(234)
 TRAPHANDLER_NOEC(235)
 TRAPHANDLER_NOEC(236)
 TRAPHANDLER_NOEC(237)
 TRAPHANDLER_NOEC(238)
 TRAPHANDLER_NOEC(239)
 TRAPHANDLER_NOEC(240)
 TRAPHANDLER_NOEC(241)
 TRAPHANDLER_NOEC(242)
 TRAPHANDLER_NOEC(243)
 TRAPHANDLER_NOEC(244)
 TRAPHANDLER_NOEC(245)
 TRAPHANDLER_NOEC(246)
 TRAPHANDLER_NOEC(247)
 TRAPHANDLER_NOEC(248)
 TRAPHANDLER_NOEC(249)
 TRAPHANDLER_NOEC(250)
 TRAPHANDLER_NOEC(251)
 TRAPHANDLER_NOEC(252)
 TRAPHANDLER_NOEC(253)
 TRAPHANDLER_NOEC(254)
 TRAPHANDLER_NOEC(255)

#endif

/*
 * Lab 3: Your code here for _alltraps
 */

 .text
 .align 2
_alltraps:
	push	%ds
	push	%es
	pushal

	/* Lab4 保证内核态屏蔽中断 */
	pushf
	pop		%ax
	mov		$FL_IF, %bx
	not		%bx
	and		%bx, %ax
	push	%ax
	popf

	movw	$GD_KD, %ax
	movw	%ax, %ds
	movw	%ax, %es
	pushl	%esp
	call	trap

/* Lab3 Challenge3 准备 syscall 的入口 */

.globl _syscall_handler
.type _syscall_handler, @function
_syscall_handler:
	push	%esi
	push	%ebp
	push	$0
	push	%edi
	push	%ebx
	push	%ecx
	push	%edx
	push	%eax
	call	syscall
	addl	$24, %esp
	pop		%ecx
	pop		%edx
	addl	$-4, %ecx
	sysexit
